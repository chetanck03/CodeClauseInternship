"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n  const base = (() => {\n    var _a, _b;\n    if (typeof window !== \"undefined\") {\n      return window.location.origin;\n    }\n    if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n      return `https://${process.env.VERCEL_URL}`;\n    }\n    if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n      return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n    }\n    return \"http://localhost:3000\";\n  })();\n  try {\n    const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n    if (url.pathname === \"/\") {\n      url.pathname = \"/api/uploadthing\";\n    }\n    return url;\n  } catch (err) {\n    throw new Error(\n      `Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`\n    );\n  }\n}\n\n\n//# sourceMappingURL=chunk-4PDGVH57.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0EsY0FBYywyQ0FBZTtBQUM3Qix3QkFBd0IsaUVBQTBCLENBQUM7QUFDbkQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSwwQkFBMEIsU0FBUztBQUNuQztBQUNBO0FBQ0E7O0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50bHkvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanM/MWYxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW50ZXJuYWwvZ2V0LWZ1bGwtYXBpLXVybC50c1xuZnVuY3Rpb24gZ2V0RnVsbEFwaVVybChtYXliZVVybCkge1xuICBjb25zdCBiYXNlID0gKCgpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmICgoX2EgPSBwcm9jZXNzID09IG51bGwgPyB2b2lkIDAgOiBwcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLlZFUkNFTF9VUkwpKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5WRVJDRUxfVVJMfWA7XG4gICAgfVxuICAgIGlmICgoX2IgPSBpbXBvcnQubWV0YS5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYi5WRVJDRUxfVVJMKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtpbXBvcnQubWV0YS5lbnYuVkVSQ0VMX1VSTH1gO1xuICAgIH1cbiAgICByZXR1cm4gXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIjtcbiAgfSkoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKG1heWJlVXJsID8/IFwiL2FwaS91cGxvYWR0aGluZ1wiLCBiYXNlKTtcbiAgICBpZiAodXJsLnBhdGhuYW1lID09PSBcIi9cIikge1xuICAgICAgdXJsLnBhdGhuYW1lID0gXCIvYXBpL3VwbG9hZHRoaW5nXCI7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gcGFyc2UgJyR7bWF5YmVVcmx9JyBhcyBhIFVSTC4gTWFrZSBzdXJlIGl0J3MgYSB2YWxpZCBVUkwgb3IgcGF0aGBcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGdldEZ1bGxBcGlVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay00UERHVkg1Ny5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml) => {\n  const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n  const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n  const code = codeMatch == null ? void 0 : codeMatch[1];\n  const message = messageMatch == null ? void 0 : messageMatch[1];\n  if (!code || !message)\n    return null;\n  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n  AccessDenied: \"FORBIDDEN\",\n  // 403 Forbidden\n  EntityTooSmall: \"TOO_SMALL\",\n  // 400 Bad Request\n  EntityTooLarge: \"TOO_LARGE\",\n  // 400 Bad Request\n  ExpiredToken: \"FORBIDDEN\",\n  // 400 Bad Request\n  IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n  // 400 Bad Request\n  InternalError: \"INTERNAL_SERVER_ERROR\",\n  // 500 Internal Server Error\n  KeyTooLongError: \"KEY_TOO_LONG\",\n  // 400 Bad Request\n  MaxMessageLengthExceeded: \"TOO_LARGE\"\n  // 400 Bad Request\n};\n\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n  const s3Res = await opts.fetch(opts.url, {\n    method: \"PUT\",\n    body: opts.chunk,\n    headers: {\n      \"Content-Type\": opts.contentType,\n      \"Content-Disposition\": [\n        opts.contentDisposition,\n        `filename=\"${encodeURI(opts.fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(opts.fileName)}`\n      ].join(\"; \")\n    }\n  });\n  if (s3Res.ok) {\n    const etag = s3Res.headers.get(\"Etag\");\n    if (!etag) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Missing Etag header from uploaded part\"\n      });\n    }\n    return etag.replace(/\"/g, \"\");\n  }\n  if (retryCount < opts.maxRetries) {\n    const delay = 2 ** retryCount * 1e3;\n    await new Promise((r) => setTimeout(r, delay));\n    return uploadPart(opts, retryCount++);\n  }\n  await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n    method: \"POST\",\n    body: JSON.stringify({\n      fileKey: opts.key\n    }),\n    headers: opts.utRequestHeaders\n  });\n  const text = await s3Res.text();\n  const parsed = maybeParseResponseXML(text);\n  if (parsed == null ? void 0 : parsed.message) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n      code: \"UPLOAD_FAILED\",\n      message: parsed.message\n    });\n  }\n  throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"Failed to upload file to storage provider\",\n    cause: s3Res\n  });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"PUT\", opts.url, true);\n    xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n    xhr.setRequestHeader(\n      \"Content-Disposition\",\n      [\n        opts.contentDisposition,\n        `filename=\"${encodeURI(opts.fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(opts.fileName)}`\n      ].join(\"; \")\n    );\n    xhr.onload = async () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        const etag = xhr.getResponseHeader(\"Etag\");\n        etag ? resolve(etag) : reject(\"NO ETAG\");\n      } else if (retryCount < opts.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 1e3;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1);\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n    let lastProgress = 0;\n    xhr.onerror = async () => {\n      lastProgress = 0;\n      if (retryCount < opts.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 100;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1);\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n    xhr.upload.onprogress = (e) => {\n      const delta = e.loaded - lastProgress;\n      lastProgress += delta;\n      opts.onProgress(delta);\n    };\n    xhr.send(opts.chunk);\n  });\n}\n\n\n//# sourceMappingURL=chunk-S3R3VXRK.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1TM1IzVlhSSy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQytFOztBQUUvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5Qyw0QkFBNEIseUJBQXlCO0FBQ3JELGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUVBQWdCO0FBQ2hDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwyRUFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUVBQWdCO0FBQzlCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxZQUFZLGlFQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDLDRCQUE0Qix5QkFBeUI7QUFDckQsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFNRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRseS8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLVMzUjNWWFJLLm1qcz9lODgyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9tdWx0aS1wYXJ0LnRzXG5pbXBvcnQgeyBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMLCBVcGxvYWRUaGluZ0Vycm9yIH0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2ludGVybmFsL3MzLWVycm9yLXBhcnNlci50c1xudmFyIG1heWJlUGFyc2VSZXNwb25zZVhNTCA9IChtYXliZVhtbCkgPT4ge1xuICBjb25zdCBjb2RlTWF0Y2ggPSBtYXliZVhtbC5tYXRjaCgvPENvZGU+KC4qPyk8XFwvQ29kZT4vcyk7XG4gIGNvbnN0IG1lc3NhZ2VNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88TWVzc2FnZT4oLio/KTxcXC9NZXNzYWdlPi9zKTtcbiAgY29uc3QgY29kZSA9IGNvZGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogY29kZU1hdGNoWzFdO1xuICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBtZXNzYWdlTWF0Y2hbMV07XG4gIGlmICghY29kZSB8fCAhbWVzc2FnZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHsgY29kZTogczNDb2RlVG9VcGxvYWRUaGluZ0NvZGVbY29kZV0gPz8gREVGQVVMVF9FUlJPUl9DT0RFLCBtZXNzYWdlIH07XG59O1xudmFyIERFRkFVTFRfRVJST1JfQ09ERSA9IFwiVVBMT0FEX0ZBSUxFRFwiO1xudmFyIHMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlID0ge1xuICBBY2Nlc3NEZW5pZWQ6IFwiRk9SQklEREVOXCIsXG4gIC8vIDQwMyBGb3JiaWRkZW5cbiAgRW50aXR5VG9vU21hbGw6IFwiVE9PX1NNQUxMXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBFbnRpdHlUb29MYXJnZTogXCJUT09fTEFSR0VcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEV4cGlyZWRUb2tlbjogXCJGT1JCSURERU5cIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEluY29ycmVjdE51bWJlck9mRmlsZXNJblBvc3RSZXF1ZXN0OiBcIlRPT19NQU5ZX0ZJTEVTXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBJbnRlcm5hbEVycm9yOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAvLyA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gIEtleVRvb0xvbmdFcnJvcjogXCJLRVlfVE9PX0xPTkdcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIE1heE1lc3NhZ2VMZW5ndGhFeGNlZWRlZDogXCJUT09fTEFSR0VcIlxuICAvLyA0MDAgQmFkIFJlcXVlc3Rcbn07XG5cbi8vIHNyYy9pbnRlcm5hbC9tdWx0aS1wYXJ0LnRzXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRQYXJ0KG9wdHMsIHJldHJ5Q291bnQgPSAwKSB7XG4gIGNvbnN0IHMzUmVzID0gYXdhaXQgb3B0cy5mZXRjaChvcHRzLnVybCwge1xuICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICBib2R5OiBvcHRzLmNodW5rLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IG9wdHMuY29udGVudFR5cGUsXG4gICAgICBcIkNvbnRlbnQtRGlzcG9zaXRpb25cIjogW1xuICAgICAgICBvcHRzLmNvbnRlbnREaXNwb3NpdGlvbixcbiAgICAgICAgYGZpbGVuYW1lPVwiJHtlbmNvZGVVUkkob3B0cy5maWxlTmFtZSl9XCJgLFxuICAgICAgICBgZmlsZW5hbWUqPVVURi04Jycke2VuY29kZVVSSShvcHRzLmZpbGVOYW1lKX1gXG4gICAgICBdLmpvaW4oXCI7IFwiKVxuICAgIH1cbiAgfSk7XG4gIGlmIChzM1Jlcy5vaykge1xuICAgIGNvbnN0IGV0YWcgPSBzM1Jlcy5oZWFkZXJzLmdldChcIkV0YWdcIik7XG4gICAgaWYgKCFldGFnKSB7XG4gICAgICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgICAgICBtZXNzYWdlOiBcIk1pc3NpbmcgRXRhZyBoZWFkZXIgZnJvbSB1cGxvYWRlZCBwYXJ0XCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXRhZy5yZXBsYWNlKC9cIi9nLCBcIlwiKTtcbiAgfVxuICBpZiAocmV0cnlDb3VudCA8IG9wdHMubWF4UmV0cmllcykge1xuICAgIGNvbnN0IGRlbGF5ID0gMiAqKiByZXRyeUNvdW50ICogMWUzO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyKSA9PiBzZXRUaW1lb3V0KHIsIGRlbGF5KSk7XG4gICAgcmV0dXJuIHVwbG9hZFBhcnQob3B0cywgcmV0cnlDb3VudCsrKTtcbiAgfVxuICBhd2FpdCBvcHRzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2ZhaWx1cmVDYWxsYmFja1wiKSwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZmlsZUtleTogb3B0cy5rZXlcbiAgICB9KSxcbiAgICBoZWFkZXJzOiBvcHRzLnV0UmVxdWVzdEhlYWRlcnNcbiAgfSk7XG4gIGNvbnN0IHRleHQgPSBhd2FpdCBzM1Jlcy50ZXh0KCk7XG4gIGNvbnN0IHBhcnNlZCA9IG1heWJlUGFyc2VSZXNwb25zZVhNTCh0ZXh0KTtcbiAgaWYgKHBhcnNlZCA9PSBudWxsID8gdm9pZCAwIDogcGFyc2VkLm1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICBjb2RlOiBcIlVQTE9BRF9GQUlMRURcIixcbiAgICAgIG1lc3NhZ2U6IHBhcnNlZC5tZXNzYWdlXG4gICAgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHVwbG9hZCBmaWxlIHRvIHN0b3JhZ2UgcHJvdmlkZXJcIixcbiAgICBjYXVzZTogczNSZXNcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiB1cGxvYWRQYXJ0V2l0aFByb2dyZXNzKG9wdHMsIHJldHJ5Q291bnQgPSAwKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4oXCJQVVRcIiwgb3B0cy51cmwsIHRydWUpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIG9wdHMuZmlsZVR5cGUpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFxuICAgICAgXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsXG4gICAgICBbXG4gICAgICAgIG9wdHMuY29udGVudERpc3Bvc2l0aW9uLFxuICAgICAgICBgZmlsZW5hbWU9XCIke2VuY29kZVVSSShvcHRzLmZpbGVOYW1lKX1cImAsXG4gICAgICAgIGBmaWxlbmFtZSo9VVRGLTgnJyR7ZW5jb2RlVVJJKG9wdHMuZmlsZU5hbWUpfWBcbiAgICAgIF0uam9pbihcIjsgXCIpXG4gICAgKTtcbiAgICB4aHIub25sb2FkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgY29uc3QgZXRhZyA9IHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkV0YWdcIik7XG4gICAgICAgIGV0YWcgPyByZXNvbHZlKGV0YWcpIDogcmVqZWN0KFwiTk8gRVRBR1wiKTtcbiAgICAgIH0gZWxzZSBpZiAocmV0cnlDb3VudCA8IG9wdHMubWF4UmV0cmllcykge1xuICAgICAgICBjb25zdCBkZWxheSA9IE1hdGgucG93KDIsIHJldHJ5Q291bnQpICogMWUzO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgZGVsYXkpKTtcbiAgICAgICAgYXdhaXQgdXBsb2FkUGFydFdpdGhQcm9ncmVzcyhvcHRzLCByZXRyeUNvdW50ICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoXCJNYXggcmV0cmllcyBleGNlZWRlZFwiKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBsYXN0UHJvZ3Jlc3MgPSAwO1xuICAgIHhoci5vbmVycm9yID0gYXN5bmMgKCkgPT4ge1xuICAgICAgbGFzdFByb2dyZXNzID0gMDtcbiAgICAgIGlmIChyZXRyeUNvdW50IDwgb3B0cy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gTWF0aC5wb3coMiwgcmV0cnlDb3VudCkgKiAxMDA7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBkZWxheSkpO1xuICAgICAgICBhd2FpdCB1cGxvYWRQYXJ0V2l0aFByb2dyZXNzKG9wdHMsIHJldHJ5Q291bnQgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChcIk1heCByZXRyaWVzIGV4Y2VlZGVkXCIpO1xuICAgICAgfVxuICAgIH07XG4gICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gKGUpID0+IHtcbiAgICAgIGNvbnN0IGRlbHRhID0gZS5sb2FkZWQgLSBsYXN0UHJvZ3Jlc3M7XG4gICAgICBsYXN0UHJvZ3Jlc3MgKz0gZGVsdGE7XG4gICAgICBvcHRzLm9uUHJvZ3Jlc3MoZGVsdGEpO1xuICAgIH07XG4gICAgeGhyLnNlbmQob3B0cy5jaHVuayk7XG4gIH0pO1xufVxuXG5leHBvcnQge1xuICBtYXliZVBhcnNlUmVzcG9uc2VYTUwsXG4gIHVwbG9hZFBhcnQsXG4gIHVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3Ncbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1TM1IzVlhSSy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_DO_NOT_USE__fatalClientError: () => (/* binding */ INTERNAL_DO_NOT_USE__fatalClientError),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   getFullApiUrl: () => (/* reexport safe */ _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/client.ts\n\n\n// src/internal/ut-reporter.ts\n\nvar createAPIRequestUrl = (config) => {\n  const url = new URL(config.url);\n  const queryParams = new URLSearchParams(url.search);\n  queryParams.set(\"actionType\", config.actionType);\n  queryParams.set(\"slug\", config.slug);\n  url.search = queryParams.toString();\n  return url;\n};\nvar createUTReporter = (cfg) => {\n  return async (type, payload) => {\n    const url = createAPIRequestUrl({\n      url: cfg.url,\n      slug: cfg.endpoint,\n      actionType: type\n    });\n    const response = await fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n    switch (type) {\n      case \"failure\": {\n        const p = payload;\n        const parsed = (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(p.s3Error ?? \"\");\n        if (parsed == null ? void 0 : parsed.message) {\n          throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: parsed.code,\n            message: parsed.message\n          });\n        } else {\n          throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: `Failed to upload file ${p.fileName} to S3`,\n            cause: p.s3Error\n          });\n        }\n      }\n    }\n    return response.ok;\n  };\n};\n\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config) => {\n  const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];\n  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };\n};\nvar capitalizeStart = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config) => {\n  if (!config)\n    return \"\";\n  const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n  const formattedTypes = allowedTypes.map((f) => f === \"blob\" ? \"file\" : f);\n  if (formattedTypes.length > 1) {\n    const lastType = formattedTypes.pop();\n    return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n  }\n  const key = allowedTypes[0];\n  const formattedKey = formattedTypes[0];\n  const { maxFileSize, maxFileCount } = config[key];\n  if (maxFileCount && maxFileCount > 1) {\n    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n  } else {\n    return `${formattedKey} (${maxFileSize})`;\n  }\n};\nvar allowedContentTextLabelGenerator = (config) => {\n  return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args) => {\n  if (typeof styleField === \"string\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"string\")\n      return result;\n  }\n  return \"\";\n};\nvar styleFieldToCssObject = (styleField, args) => {\n  if (typeof styleField === \"object\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"object\")\n      return result;\n  }\n  return {};\n};\nvar contentFieldToContent = (contentField, arg) => {\n  if (!contentField)\n    return null;\n  if (typeof contentField !== \"function\")\n    return contentField;\n  if (typeof contentField === \"function\") {\n    const result = contentField(arg);\n    return result;\n  }\n};\n\n// src/client.ts\nvar INTERNAL_DO_NOT_USE__fatalClientError = (e) => new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n  code: \"INTERNAL_CLIENT_ERROR\",\n  message: \"Something went wrong. Please report this to UploadThing.\",\n  cause: e\n});\nvar DANGEROUS__uploadFiles = async (endpoint, opts) => {\n  const reportEventToUT = createUTReporter({\n    endpoint: String(endpoint),\n    url: opts.url\n  });\n  const s3ConnectionRes = await fetch(\n    createAPIRequestUrl({\n      url: opts.url,\n      slug: String(endpoint),\n      actionType: \"upload\"\n    }),\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f) => ({ name: f.name, size: f.size }))\n      }),\n      // Express requires Content-Type to be explicitly set to parse body properly\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ).then(async (res) => {\n    if (!res.ok) {\n      const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n      throw error;\n    }\n    const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n    if (jsonOrError instanceof Error) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: jsonOrError.message,\n        cause: res\n      });\n    }\n    return jsonOrError;\n  });\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n      code: \"BAD_REQUEST\",\n      message: \"No URL. How did you even get here?\",\n      cause: s3ConnectionRes\n    });\n  }\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {\n    const file = opts.files.find((f) => f.name === presigned.fileName);\n    if (!file) {\n      console.error(\"No file found for presigned URL\", presigned);\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"NOT_FOUND\",\n        message: \"No file found for presigned URL\",\n        cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n      });\n    }\n    const {\n      presignedUrls,\n      uploadId,\n      chunkSize,\n      contentDisposition,\n      key,\n      pollingUrl,\n      pollingJwt\n    } = presigned;\n    let uploadedBytes = 0;\n    let etags;\n    try {\n      etags = await Promise.all(\n        presignedUrls.map(async (url, index) => {\n          const offset = chunkSize * index;\n          const end = Math.min(offset + chunkSize, file.size);\n          const chunk = file.slice(offset, end);\n          const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPartWithProgress)({\n            url,\n            chunk,\n            contentDisposition,\n            fileType: file.type,\n            fileName: file.name,\n            maxRetries: 10,\n            onProgress: (delta) => {\n              var _a;\n              uploadedBytes += delta;\n              const percent = uploadedBytes / file.size * 100;\n              (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, { file: file.name, progress: percent });\n            }\n          });\n          return { tag: etag, partNumber: index + 1 };\n        })\n      );\n    } catch (error) {\n      await reportEventToUT(\"failure\", {\n        fileKey: key,\n        uploadId,\n        fileName: file.name,\n        s3Error: error.toString()\n      });\n      throw \"unreachable\";\n    }\n    const uploadOk = await reportEventToUT(\"multipart-complete\", {\n      uploadId,\n      fileKey: key,\n      etags\n    });\n    if (!uploadOk) {\n      console.log(\"Failed to alert UT of upload completion\");\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to alert UT of upload completion\"\n      });\n    }\n    await new Promise((r) => setTimeout(r, 750));\n    const serverData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.withExponentialBackoff)(async () => {\n      const res = await fetch(pollingUrl, {\n        headers: { authorization: pollingJwt }\n      }).then((r) => r.json());\n      return res.status === \"done\" ? res.callbackData : void 0;\n    });\n    return {\n      name: file.name,\n      size: file.size,\n      key: presigned.key,\n      serverData,\n      url: \"https://utfs.io/f/\" + key\n    };\n  });\n  return Promise.all(fileUploadPromises);\n};\nvar genUploader = (initOpts) => {\n  const url = (initOpts == null ? void 0 : initOpts.url) instanceof URL ? initOpts.url : (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl)(initOpts == null ? void 0 : initOpts.url);\n  return (endpoint, opts) => (\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    DANGEROUS__uploadFiles(endpoint, {\n      ...opts,\n      url\n    })\n  );\n};\nvar classNames = (...classes) => {\n  return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes) => {\n  const accepted = fileTypes.map((type) => {\n    if (type === \"blob\")\n      return \"blob\";\n    if (type === \"pdf\")\n      return \"application/pdf\";\n    if (type.includes(\"/\"))\n      return type;\n    else\n      return `${type}/*`;\n  });\n  if (accepted.includes(\"blob\")) {\n    return void 0;\n  }\n  return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes) => {\n  const mimeTypes = generateMimeTypes(fileTypes);\n  if (!mimeTypes)\n    return void 0;\n  return Object.fromEntries(mimeTypes.map((type) => [type, []]));\n};\n\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n  const base = (() => {\n    var _a, _b;\n    if (typeof window !== \"undefined\") {\n      return window.location.origin;\n    }\n    if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n      return `https://${process.env.VERCEL_URL}`;\n    }\n    if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n      return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n    }\n    return \"http://localhost:3000\";\n  })();\n  try {\n    const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n    if (url.pathname === \"/\") {\n      url.pathname = \"/api/uploadthing\";\n    }\n    return url;\n  } catch (err) {\n    throw new Error(\n      `Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`\n    );\n  }\n}\n\n\n//# sourceMappingURL=chunk-4PDGVH57.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0EsY0FBYywyQ0FBZTtBQUM3Qix3QkFBd0IsaUVBQTBCLENBQUM7QUFDbkQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSwwQkFBMEIsU0FBUztBQUNuQztBQUNBO0FBQ0E7O0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50bHkvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanM/ZmE4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW50ZXJuYWwvZ2V0LWZ1bGwtYXBpLXVybC50c1xuZnVuY3Rpb24gZ2V0RnVsbEFwaVVybChtYXliZVVybCkge1xuICBjb25zdCBiYXNlID0gKCgpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmICgoX2EgPSBwcm9jZXNzID09IG51bGwgPyB2b2lkIDAgOiBwcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLlZFUkNFTF9VUkwpKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5WRVJDRUxfVVJMfWA7XG4gICAgfVxuICAgIGlmICgoX2IgPSBpbXBvcnQubWV0YS5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYi5WRVJDRUxfVVJMKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtpbXBvcnQubWV0YS5lbnYuVkVSQ0VMX1VSTH1gO1xuICAgIH1cbiAgICByZXR1cm4gXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIjtcbiAgfSkoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKG1heWJlVXJsID8/IFwiL2FwaS91cGxvYWR0aGluZ1wiLCBiYXNlKTtcbiAgICBpZiAodXJsLnBhdGhuYW1lID09PSBcIi9cIikge1xuICAgICAgdXJsLnBhdGhuYW1lID0gXCIvYXBpL3VwbG9hZHRoaW5nXCI7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gcGFyc2UgJyR7bWF5YmVVcmx9JyBhcyBhIFVSTC4gTWFrZSBzdXJlIGl0J3MgYSB2YWxpZCBVUkwgb3IgcGF0aGBcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGdldEZ1bGxBcGlVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay00UERHVkg1Ny5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-CFWCJEOQ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-CFWCJEOQ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-TX4EGJ4S.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-TX4EGJ4S.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n\n// src/server.ts\n\n\n// src/sdk/index.ts\n\n\n// src/sdk/utils.ts\n\nfunction guardServerOnly() {\n  if (typeof window !== \"undefined\") {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n      code: \"INTERNAL_SERVER_ERROR\",\n      message: \"The `utapi` can only be used on the server.\"\n    });\n  }\n}\nfunction getApiKeyOrThrow(apiKey) {\n  if (apiKey)\n    return apiKey;\n  if (process.env.UPLOADTHING_SECRET)\n    return process.env.UPLOADTHING_SECRET;\n  throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n    code: \"MISSING_ENV\",\n    message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n  });\n}\nvar uploadFilesInternal = async (data, opts) => {\n  const fileData = data.files.map((file) => ({\n    name: file.name ?? \"unnamed-blob\",\n    type: file.type,\n    size: file.size\n  }));\n  const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n    method: \"POST\",\n    headers: opts.utRequestHeaders,\n    cache: \"no-store\",\n    body: JSON.stringify({\n      files: fileData,\n      metadata: data.metadata,\n      contentDisposition: data.contentDisposition\n    })\n  });\n  if (!res.ok) {\n    const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(res);\n    throw error;\n  }\n  const clonedRes = res.clone();\n  const json = await res.json();\n  if (\"error\" in json) {\n    const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(clonedRes);\n    throw error;\n  }\n  const uploads = await Promise.allSettled(\n    data.files.map(async (file, i) => {\n      const { presignedUrls, key, fileUrl, uploadId, chunkSize } = json.data[i];\n      if (!presignedUrls || !Array.isArray(presignedUrls)) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n          code: \"URL_GENERATION_FAILED\",\n          message: \"Failed to generate presigned URL\",\n          cause: JSON.stringify(json.data[i])\n        });\n      }\n      const etags = await Promise.all(\n        presignedUrls.map(async (url, index) => {\n          const offset = chunkSize * index;\n          const end = Math.min(offset + chunkSize, file.size);\n          const chunk = file.slice(offset, end);\n          const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPart)({\n            fetch: opts.fetch,\n            url,\n            chunk,\n            contentDisposition: data.contentDisposition,\n            contentType: file.type,\n            fileName: file.name,\n            maxRetries: 10,\n            key,\n            utRequestHeaders: opts.utRequestHeaders\n          });\n          return { tag: etag, partNumber: index + 1 };\n        })\n      );\n      await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/completeMultipart\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n          fileKey: key,\n          uploadId,\n          etags\n        }),\n        headers: opts.utRequestHeaders\n      });\n      await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.pollForFileData)({\n        url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(`/api/pollUpload/${key}`),\n        apiKey: opts.utRequestHeaders[\"x-uploadthing-api-key\"],\n        sdkVersion: _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n      });\n      return {\n        key,\n        url: fileUrl,\n        name: file.name,\n        size: file.size\n      };\n    })\n  );\n  return uploads.map((upload) => {\n    if (upload.status === \"fulfilled\") {\n      const data2 = upload.value;\n      return { data: data2, error: null };\n    }\n    const reason = upload.reason;\n    const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.toObject(reason);\n    return { data: null, error };\n  });\n};\n\n// src/sdk/index.ts\nvar UTApi = class {\n  constructor(opts) {\n    this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch;\n    this.apiKey = (opts == null ? void 0 : opts.apiKey) ?? process.env.UPLOADTHING_SECRET;\n    this.defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n      \"x-uploadthing-api-key\": this.apiKey,\n      \"x-uploadthing-version\": _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n    };\n    guardServerOnly();\n    getApiKeyOrThrow(this.apiKey);\n    (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n  }\n  async requestUploadThing(pathname, body, fallbackErrorMessage) {\n    const res = await this.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(pathname), {\n      method: \"POST\",\n      cache: \"no-store\",\n      headers: this.defaultHeaders,\n      body: JSON.stringify(body)\n    });\n    const json = await res.json();\n    if (!res.ok || \"error\" in json) {\n      console.error(\"[UT] Error:\", json);\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n      });\n    }\n    return json;\n  }\n  /**\n   * @param {FileEsque | FileEsque[]} files The file(s) to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */\n  async uploadFiles(files, opts) {\n    guardServerOnly();\n    const filesToUpload = Array.isArray(files) ? files : [files];\n    const uploads = await uploadFilesInternal(\n      {\n        files: filesToUpload,\n        metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n        contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n      },\n      {\n        fetch: this.fetch,\n        utRequestHeaders: this.defaultHeaders\n      }\n    );\n    const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n    return uploadFileResponse;\n  }\n  /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */\n  async uploadFilesFromUrl(urls, opts) {\n    guardServerOnly();\n    const fileUrls = Array.isArray(urls) ? urls : [urls];\n    const formData = new FormData();\n    formData.append(\"metadata\", JSON.stringify((opts == null ? void 0 : opts.metadata) ?? {}));\n    const filesToUpload = await Promise.all(\n      fileUrls.map(async (url) => {\n        if (typeof url === \"string\")\n          url = new URL(url);\n        const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n        const fileResponse = await fetch(url);\n        if (!fileResponse.ok) {\n          throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Failed to download requested file.\",\n            cause: fileResponse\n          });\n        }\n        const blob = await fileResponse.blob();\n        return Object.assign(blob, { name: filename });\n      })\n    );\n    const uploads = await uploadFilesInternal(\n      {\n        files: filesToUpload,\n        metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n        contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n      },\n      {\n        fetch: this.fetch,\n        utRequestHeaders: this.defaultHeaders\n      }\n    );\n    const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n    return uploadFileResponse;\n  }\n  /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */\n  async deleteFiles(fileKeys) {\n    guardServerOnly();\n    if (!Array.isArray(fileKeys))\n      fileKeys = [fileKeys];\n    return this.requestUploadThing(\n      \"/api/deleteFile\",\n      { fileKeys },\n      \"An unknown error occured while deleting files.\"\n    );\n  }\n  /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */\n  async getFileUrls(fileKeys) {\n    guardServerOnly();\n    if (!Array.isArray(fileKeys))\n      fileKeys = [fileKeys];\n    const json = await this.requestUploadThing(\n      \"/api/getFileUrl\",\n      { fileKeys },\n      \"An unknown error occured while retrieving file URLs.\"\n    );\n    return json.data;\n  }\n  /**\n   * Request file list from UploadThing storage.\n   *\n   * @example\n   * const data = await listFiles();\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */\n  async listFiles() {\n    guardServerOnly();\n    const json = await this.requestUploadThing(\"/api/listFiles\", {}, \"An unknown error occured while listing files.\");\n    return json.files;\n  }\n  async renameFile(updates) {\n    guardServerOnly();\n    if (!Array.isArray(updates))\n      updates = [updates];\n    return this.requestUploadThing(\n      \"/api/renameFile\",\n      { updates },\n      \"An unknown error occured while renaming files.\"\n    );\n  }\n  async getUsageInfo() {\n    guardServerOnly();\n    return this.requestUploadThing(\n      \"/api/getUsageInfo\",\n      {},\n      \"An unknown error occured while getting usage info.\"\n    );\n  }\n};\n\n// src/server.ts\nvar createUploadthing = (opts) => (0,_chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.createBuilder)(opts);\nvar createServerHandler = (opts) => {\n  (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n  const requestHandler = (0,_chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.buildRequestHandler)(opts);\n  const POST = async (request) => {\n    const req = request instanceof Request ? request : request.request;\n    const response = await requestHandler({ req });\n    if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError) {\n      return new Response(JSON.stringify((0,_chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.formatError)(response, opts.router)), {\n        status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.getStatusCodeFromError)(response),\n        headers: {\n          \"x-uploadthing-version\": _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        }\n      });\n    }\n    if (response.status !== 200) {\n      return new Response(\"An unknown error occured\", {\n        status: 500,\n        headers: {\n          \"x-uploadthing-version\": _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        }\n      });\n    }\n    return new Response(JSON.stringify(response.body), {\n      status: response.status,\n      headers: {\n        \"x-uploadthing-version\": _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n      }\n    });\n  };\n  const getBuildPerms = (0,_chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)(opts);\n  const GET = (request) => {\n    const _req = request instanceof Request ? request : request.request;\n    return new Response(JSON.stringify(getBuildPerms()), {\n      status: 200,\n      headers: {\n        \"x-uploadthing-version\": _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n      }\n    });\n  };\n  return { GET, POST };\n};\nvar extractRouterConfig = (router) => (0,_chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)({ router })();\n\n\n//# sourceMappingURL=chunk-CFWCJEOQ.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1DRldDSkVPUS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFOEI7QUFHQTtBQU9BOztBQUU5QjtBQUNvRzs7QUFFcEc7QUFDK0g7O0FBRS9IO0FBSzZCO0FBQzdCO0FBQ0E7QUFDQSxjQUFjLGlFQUFnQjtBQUM5QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpRUFBZ0I7QUFDNUI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsK0JBQStCLDJFQUFzQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSx3QkFBd0IsaUVBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUVBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtREFBbUQ7QUFDakU7QUFDQSxrQkFBa0IsaUVBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsK0RBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLG1CQUFtQjtBQUNuQixTQUFTO0FBQ1Q7QUFDQSx1QkFBdUIsMkVBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsWUFBWSxvRUFBZTtBQUMzQixhQUFhLDJFQUFzQixvQkFBb0IsSUFBSTtBQUMzRDtBQUNBLG9CQUFvQixvRUFBbUI7QUFDdkMsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0Esa0JBQWtCLGlFQUFnQjtBQUNsQyxhQUFhO0FBQ2IsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isb0VBQW1CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLElBQUksMEVBQXFCO0FBQ3pCO0FBQ0E7QUFDQSxpQ0FBaUMsMkVBQXVCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpRUFBaUI7QUFDakM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseUJBQXlCO0FBQ3RDLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEY7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUVBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EscUNBQXFDLGdCQUFnQjtBQUNyRCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFtQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsVUFBVTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUssdUlBQXVJO0FBQ3BLO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix3SUFBd0ksRUFBRSx5SUFBeUk7QUFDL1M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFVBQVU7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0Msa0VBQWE7QUFDL0M7QUFDQSxFQUFFLDBFQUFxQjtBQUN2Qix5QkFBeUIsd0VBQW1CO0FBQzVDO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCw0QkFBNEIsaUVBQWlCO0FBQzdDLHlDQUF5QyxnRUFBVztBQUNwRCxnQkFBZ0IsMkVBQXNCO0FBQ3RDO0FBQ0EsbUNBQW1DLG9FQUFtQjtBQUN0RDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9FQUFtQjtBQUN0RDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvRUFBbUI7QUFDcEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSx3QkFBd0IsZ0ZBQTJCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0VBQW1CO0FBQ3BEO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVztBQUNYO0FBQ0Esc0NBQXNDLGdGQUEyQixHQUFHLFFBQVE7O0FBTzFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGx5Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstQ0ZXQ0pFT1EubWpzPzA0Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdXBsb2FkUGFydFxufSBmcm9tIFwiLi9jaHVuay1TM1IzVlhSSy5tanNcIjtcbmltcG9ydCB7XG4gIGluY29tcGF0aWJsZU5vZGVHdWFyZFxufSBmcm9tIFwiLi9jaHVuay1XUFNZM01GSi5tanNcIjtcbmltcG9ydCB7XG4gIFVQTE9BRFRISU5HX1ZFUlNJT04sXG4gIGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcixcbiAgYnVpbGRSZXF1ZXN0SGFuZGxlcixcbiAgY3JlYXRlQnVpbGRlcixcbiAgZm9ybWF0RXJyb3Jcbn0gZnJvbSBcIi4vY2h1bmstVFg0RUdKNFMubWpzXCI7XG5cbi8vIHNyYy9zZXJ2ZXIudHNcbmltcG9ydCB7IGdldFN0YXR1c0NvZGVGcm9tRXJyb3IsIFVwbG9hZFRoaW5nRXJyb3IgYXMgVXBsb2FkVGhpbmdFcnJvcjMgfSBmcm9tIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiO1xuXG4vLyBzcmMvc2RrL2luZGV4LnRzXG5pbXBvcnQgeyBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMIGFzIGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyLCBVcGxvYWRUaGluZ0Vycm9yIGFzIFVwbG9hZFRoaW5nRXJyb3IyIH0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcblxuLy8gc3JjL3Nkay91dGlscy50c1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTCxcbiAgcG9sbEZvckZpbGVEYXRhLFxuICBVcGxvYWRUaGluZ0Vycm9yXG59IGZyb20gXCJAdXBsb2FkdGhpbmcvc2hhcmVkXCI7XG5mdW5jdGlvbiBndWFyZFNlcnZlck9ubHkoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgIG1lc3NhZ2U6IFwiVGhlIGB1dGFwaWAgY2FuIG9ubHkgYmUgdXNlZCBvbiB0aGUgc2VydmVyLlwiXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFwaUtleU9yVGhyb3coYXBpS2V5KSB7XG4gIGlmIChhcGlLZXkpXG4gICAgcmV0dXJuIGFwaUtleTtcbiAgaWYgKHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVClcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuVVBMT0FEVEhJTkdfU0VDUkVUO1xuICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgY29kZTogXCJNSVNTSU5HX0VOVlwiLFxuICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBgVVBMT0FEVEhJTkdfU0VDUkVUYCBlbnYgdmFyaWFibGUuXCJcbiAgfSk7XG59XG52YXIgdXBsb2FkRmlsZXNJbnRlcm5hbCA9IGFzeW5jIChkYXRhLCBvcHRzKSA9PiB7XG4gIGNvbnN0IGZpbGVEYXRhID0gZGF0YS5maWxlcy5tYXAoKGZpbGUpID0+ICh7XG4gICAgbmFtZTogZmlsZS5uYW1lID8/IFwidW5uYW1lZC1ibG9iXCIsXG4gICAgdHlwZTogZmlsZS50eXBlLFxuICAgIHNpemU6IGZpbGUuc2l6ZVxuICB9KSk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IG9wdHMuZmV0Y2goZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChcIi9hcGkvdXBsb2FkRmlsZXNcIiksIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGhlYWRlcnM6IG9wdHMudXRSZXF1ZXN0SGVhZGVycyxcbiAgICBjYWNoZTogXCJuby1zdG9yZVwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGZpbGVzOiBmaWxlRGF0YSxcbiAgICAgIG1ldGFkYXRhOiBkYXRhLm1ldGFkYXRhLFxuICAgICAgY29udGVudERpc3Bvc2l0aW9uOiBkYXRhLmNvbnRlbnREaXNwb3NpdGlvblxuICAgIH0pXG4gIH0pO1xuICBpZiAoIXJlcy5vaykge1xuICAgIGNvbnN0IGVycm9yID0gYXdhaXQgVXBsb2FkVGhpbmdFcnJvci5mcm9tUmVzcG9uc2UocmVzKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBjb25zdCBjbG9uZWRSZXMgPSByZXMuY2xvbmUoKTtcbiAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gIGlmIChcImVycm9yXCIgaW4ganNvbikge1xuICAgIGNvbnN0IGVycm9yID0gYXdhaXQgVXBsb2FkVGhpbmdFcnJvci5mcm9tUmVzcG9uc2UoY2xvbmVkUmVzKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBjb25zdCB1cGxvYWRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFxuICAgIGRhdGEuZmlsZXMubWFwKGFzeW5jIChmaWxlLCBpKSA9PiB7XG4gICAgICBjb25zdCB7IHByZXNpZ25lZFVybHMsIGtleSwgZmlsZVVybCwgdXBsb2FkSWQsIGNodW5rU2l6ZSB9ID0ganNvbi5kYXRhW2ldO1xuICAgICAgaWYgKCFwcmVzaWduZWRVcmxzIHx8ICFBcnJheS5pc0FycmF5KHByZXNpZ25lZFVybHMpKSB7XG4gICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiBcIlVSTF9HRU5FUkFUSU9OX0ZBSUxFRFwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHByZXNpZ25lZCBVUkxcIixcbiAgICAgICAgICBjYXVzZTogSlNPTi5zdHJpbmdpZnkoanNvbi5kYXRhW2ldKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV0YWdzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHByZXNpZ25lZFVybHMubWFwKGFzeW5jICh1cmwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2h1bmtTaXplICogaW5kZXg7XG4gICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5taW4ob2Zmc2V0ICsgY2h1bmtTaXplLCBmaWxlLnNpemUpO1xuICAgICAgICAgIGNvbnN0IGNodW5rID0gZmlsZS5zbGljZShvZmZzZXQsIGVuZCk7XG4gICAgICAgICAgY29uc3QgZXRhZyA9IGF3YWl0IHVwbG9hZFBhcnQoe1xuICAgICAgICAgICAgZmV0Y2g6IG9wdHMuZmV0Y2gsXG4gICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgIGNvbnRlbnREaXNwb3NpdGlvbjogZGF0YS5jb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgICAgICBjb250ZW50VHlwZTogZmlsZS50eXBlLFxuICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIG1heFJldHJpZXM6IDEwLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdXRSZXF1ZXN0SGVhZGVyczogb3B0cy51dFJlcXVlc3RIZWFkZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHsgdGFnOiBldGFnLCBwYXJ0TnVtYmVyOiBpbmRleCArIDEgfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBhd2FpdCBvcHRzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2NvbXBsZXRlTXVsdGlwYXJ0XCIpLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBmaWxlS2V5OiBrZXksXG4gICAgICAgICAgdXBsb2FkSWQsXG4gICAgICAgICAgZXRhZ3NcbiAgICAgICAgfSksXG4gICAgICAgIGhlYWRlcnM6IG9wdHMudXRSZXF1ZXN0SGVhZGVyc1xuICAgICAgfSk7XG4gICAgICBhd2FpdCBwb2xsRm9yRmlsZURhdGEoe1xuICAgICAgICB1cmw6IGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoYC9hcGkvcG9sbFVwbG9hZC8ke2tleX1gKSxcbiAgICAgICAgYXBpS2V5OiBvcHRzLnV0UmVxdWVzdEhlYWRlcnNbXCJ4LXVwbG9hZHRoaW5nLWFwaS1rZXlcIl0sXG4gICAgICAgIHNka1ZlcnNpb246IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5LFxuICAgICAgICB1cmw6IGZpbGVVcmwsXG4gICAgICAgIG5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgc2l6ZTogZmlsZS5zaXplXG4gICAgICB9O1xuICAgIH0pXG4gICk7XG4gIHJldHVybiB1cGxvYWRzLm1hcCgodXBsb2FkKSA9PiB7XG4gICAgaWYgKHVwbG9hZC5zdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIpIHtcbiAgICAgIGNvbnN0IGRhdGEyID0gdXBsb2FkLnZhbHVlO1xuICAgICAgcmV0dXJuIHsgZGF0YTogZGF0YTIsIGVycm9yOiBudWxsIH07XG4gICAgfVxuICAgIGNvbnN0IHJlYXNvbiA9IHVwbG9hZC5yZWFzb247XG4gICAgY29uc3QgZXJyb3IgPSBVcGxvYWRUaGluZ0Vycm9yLnRvT2JqZWN0KHJlYXNvbik7XG4gICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgfSk7XG59O1xuXG4vLyBzcmMvc2RrL2luZGV4LnRzXG52YXIgVVRBcGkgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLmZldGNoID0gKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZmV0Y2gpID8/IGdsb2JhbFRoaXMuZmV0Y2g7XG4gICAgdGhpcy5hcGlLZXkgPSAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5hcGlLZXkpID8/IHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVDtcbiAgICB0aGlzLmRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBcIngtdXBsb2FkdGhpbmctYXBpLWtleVwiOiB0aGlzLmFwaUtleSxcbiAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICB9O1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGdldEFwaUtleU9yVGhyb3codGhpcy5hcGlLZXkpO1xuICAgIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpO1xuICB9XG4gIGFzeW5jIHJlcXVlc3RVcGxvYWRUaGluZyhwYXRobmFtZSwgYm9keSwgZmFsbGJhY2tFcnJvck1lc3NhZ2UpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyKHBhdGhuYW1lKSwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGNhY2hlOiBcIm5vLXN0b3JlXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmRlZmF1bHRIZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAoIXJlcy5vayB8fCBcImVycm9yXCIgaW4ganNvbikge1xuICAgICAgY29uc29sZS5lcnJvcihcIltVVF0gRXJyb3I6XCIsIGpzb24pO1xuICAgICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgbWVzc2FnZTogXCJlcnJvclwiIGluIGpzb24gJiYgdHlwZW9mIGpzb24uZXJyb3IgPT09IFwic3RyaW5nXCIgPyBqc29uLmVycm9yIDogZmFsbGJhY2tFcnJvck1lc3NhZ2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtGaWxlRXNxdWUgfCBGaWxlRXNxdWVbXX0gZmlsZXMgVGhlIGZpbGUocykgdG8gdXBsb2FkXG4gICAqIEBwYXJhbSB7SnNvbn0gbWV0YWRhdGEgSlNPTi1wYXJzZWFibGUgbWV0YWRhdGEgdG8gYXR0YWNoIHRvIHRoZSB1cGxvYWRlZCBmaWxlKHMpXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IHVwbG9hZEZpbGVzKG5ldyBGaWxlKFtcImZvb1wiXSwgXCJmb28udHh0XCIpKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgdXBsb2FkRmlsZXMoW1xuICAgKiAgIG5ldyBGaWxlKFtcImZvb1wiXSwgXCJmb28udHh0XCIpLFxuICAgKiAgIG5ldyBGaWxlKFtcImJhclwiXSwgXCJiYXIudHh0XCIpLFxuICAgKiBdKTtcbiAgICovXG4gIGFzeW5jIHVwbG9hZEZpbGVzKGZpbGVzLCBvcHRzKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgY29uc3QgZmlsZXNUb1VwbG9hZCA9IEFycmF5LmlzQXJyYXkoZmlsZXMpID8gZmlsZXMgOiBbZmlsZXNdO1xuICAgIGNvbnN0IHVwbG9hZHMgPSBhd2FpdCB1cGxvYWRGaWxlc0ludGVybmFsKFxuICAgICAge1xuICAgICAgICBmaWxlczogZmlsZXNUb1VwbG9hZCxcbiAgICAgICAgbWV0YWRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLm1ldGFkYXRhKSA/PyB7fSxcbiAgICAgICAgY29udGVudERpc3Bvc2l0aW9uOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5jb250ZW50RGlzcG9zaXRpb24pID8/IFwiaW5saW5lXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICB1dFJlcXVlc3RIZWFkZXJzOiB0aGlzLmRlZmF1bHRIZWFkZXJzXG4gICAgICB9XG4gICAgKTtcbiAgICBjb25zdCB1cGxvYWRGaWxlUmVzcG9uc2UgPSBBcnJheS5pc0FycmF5KGZpbGVzKSA/IHVwbG9hZHMgOiB1cGxvYWRzWzBdO1xuICAgIHJldHVybiB1cGxvYWRGaWxlUmVzcG9uc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCBvZiB0aGUgZmlsZSB0byB1cGxvYWRcbiAgICogQHBhcmFtIHtKc29ufSBtZXRhZGF0YSBKU09OLXBhcnNlYWJsZSBtZXRhZGF0YSB0byBhdHRhY2ggdG8gdGhlIHVwbG9hZGVkIGZpbGUocylcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgdXBsb2FkRmlsZUZyb21VcmwoXCJodHRwczovL3VwbG9hZHRoaW5nLmNvbS9mLzJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIik7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IHVwbG9hZEZpbGVGcm9tVXJsKFtcbiAgICogICBcImh0dHBzOi8vdXBsb2FkdGhpbmcuY29tL2YvMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFxuICAgKiAgIFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8xNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiXG4gICAqIF0pXG4gICAqL1xuICBhc3luYyB1cGxvYWRGaWxlc0Zyb21VcmwodXJscywgb3B0cykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGNvbnN0IGZpbGVVcmxzID0gQXJyYXkuaXNBcnJheSh1cmxzKSA/IHVybHMgOiBbdXJsc107XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoXCJtZXRhZGF0YVwiLCBKU09OLnN0cmluZ2lmeSgob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5tZXRhZGF0YSkgPz8ge30pKTtcbiAgICBjb25zdCBmaWxlc1RvVXBsb2FkID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBmaWxlVXJscy5tYXAoYXN5bmMgKHVybCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICB1cmwgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gdXJsLnBhdGhuYW1lLnNwbGl0KFwiL1wiKS5wb3AoKSA/PyBcInVua25vd24tZmlsZW5hbWVcIjtcbiAgICAgICAgY29uc3QgZmlsZVJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICAgICAgaWYgKCFmaWxlUmVzcG9uc2Uub2spIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gZG93bmxvYWQgcmVxdWVzdGVkIGZpbGUuXCIsXG4gICAgICAgICAgICBjYXVzZTogZmlsZVJlc3BvbnNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IGZpbGVSZXNwb25zZS5ibG9iKCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGJsb2IsIHsgbmFtZTogZmlsZW5hbWUgfSk7XG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgdXBsb2FkcyA9IGF3YWl0IHVwbG9hZEZpbGVzSW50ZXJuYWwoXG4gICAgICB7XG4gICAgICAgIGZpbGVzOiBmaWxlc1RvVXBsb2FkLFxuICAgICAgICBtZXRhZGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMubWV0YWRhdGEpID8/IHt9LFxuICAgICAgICBjb250ZW50RGlzcG9zaXRpb246IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmNvbnRlbnREaXNwb3NpdGlvbikgPz8gXCJpbmxpbmVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIHV0UmVxdWVzdEhlYWRlcnM6IHRoaXMuZGVmYXVsdEhlYWRlcnNcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHVwbG9hZEZpbGVSZXNwb25zZSA9IEFycmF5LmlzQXJyYXkodXJscykgPyB1cGxvYWRzIDogdXBsb2Fkc1swXTtcbiAgICByZXR1cm4gdXBsb2FkRmlsZVJlc3BvbnNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGRlbGV0ZSBmaWxlcyBmcm9tIFVwbG9hZFRoaW5nIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IGZpbGVLZXlzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IGRlbGV0ZUZpbGVzKFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgZGVsZXRlRmlsZXMoW1wiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFwiMTY0OTM1M2ItMDRlYS00OGEyLTlkYjctMzFkZTdmNTYyYzhkX2ltYWdlMi5qcGdcIl0pXG4gICAqL1xuICBhc3luYyBkZWxldGVGaWxlcyhmaWxlS2V5cykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlS2V5cykpXG4gICAgICBmaWxlS2V5cyA9IFtmaWxlS2V5c107XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFxuICAgICAgXCIvYXBpL2RlbGV0ZUZpbGVcIixcbiAgICAgIHsgZmlsZUtleXMgfSxcbiAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGRlbGV0aW5nIGZpbGVzLlwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmVxdWVzdCBmaWxlIFVSTHMgZnJvbSBVcGxvYWRUaGluZyBzdG9yYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHN0cmluZ1tdfSBmaWxlS2V5c1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RmlsZVVybHMoXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIpO1xuICAgKiBjb25zb2xlLmxvZyhkYXRhKTsgLy8gW3trZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8yZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCJ9XVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RmlsZVVybHMoW1wiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFwiMTY0OTM1M2ItMDRlYS00OGEyLTlkYjctMzFkZTdmNTYyYzhkX2ltYWdlMi5qcGdcIl0pXG4gICAqIGNvbnNvbGUubG9nKGRhdGEpIC8vIFt7a2V5OiBcIjJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIiwgdXJsOiBcImh0dHBzOi8vdXBsb2FkdGhpbmcuY29tL2YvMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiIH0se2tleTogXCIxNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8xNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wifV1cbiAgICovXG4gIGFzeW5jIGdldEZpbGVVcmxzKGZpbGVLZXlzKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVLZXlzKSlcbiAgICAgIGZpbGVLZXlzID0gW2ZpbGVLZXlzXTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXG4gICAgICBcIi9hcGkvZ2V0RmlsZVVybFwiLFxuICAgICAgeyBmaWxlS2V5cyB9LFxuICAgICAgXCJBbiB1bmtub3duIGVycm9yIG9jY3VyZWQgd2hpbGUgcmV0cmlldmluZyBmaWxlIFVSTHMuXCJcbiAgICApO1xuICAgIHJldHVybiBqc29uLmRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFJlcXVlc3QgZmlsZSBsaXN0IGZyb20gVXBsb2FkVGhpbmcgc3RvcmFnZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgZGF0YSA9IGF3YWl0IGxpc3RGaWxlcygpO1xuICAgKiBjb25zb2xlLmxvZyhkYXRhKTsgLy8geyBrZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCBpZDogXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhcIiB9XG4gICAqL1xuICBhc3luYyBsaXN0RmlsZXMoKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFwiL2FwaS9saXN0RmlsZXNcIiwge30sIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGxpc3RpbmcgZmlsZXMuXCIpO1xuICAgIHJldHVybiBqc29uLmZpbGVzO1xuICB9XG4gIGFzeW5jIHJlbmFtZUZpbGUodXBkYXRlcykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh1cGRhdGVzKSlcbiAgICAgIHVwZGF0ZXMgPSBbdXBkYXRlc107XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFxuICAgICAgXCIvYXBpL3JlbmFtZUZpbGVcIixcbiAgICAgIHsgdXBkYXRlcyB9LFxuICAgICAgXCJBbiB1bmtub3duIGVycm9yIG9jY3VyZWQgd2hpbGUgcmVuYW1pbmcgZmlsZXMuXCJcbiAgICApO1xuICB9XG4gIGFzeW5jIGdldFVzYWdlSW5mbygpIHtcbiAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXG4gICAgICBcIi9hcGkvZ2V0VXNhZ2VJbmZvXCIsXG4gICAgICB7fSxcbiAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGdldHRpbmcgdXNhZ2UgaW5mby5cIlxuICAgICk7XG4gIH1cbn07XG5cbi8vIHNyYy9zZXJ2ZXIudHNcbnZhciBjcmVhdGVVcGxvYWR0aGluZyA9IChvcHRzKSA9PiBjcmVhdGVCdWlsZGVyKG9wdHMpO1xudmFyIGNyZWF0ZVNlcnZlckhhbmRsZXIgPSAob3B0cykgPT4ge1xuICBpbmNvbXBhdGlibGVOb2RlR3VhcmQoKTtcbiAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPSBidWlsZFJlcXVlc3RIYW5kbGVyKG9wdHMpO1xuICBjb25zdCBQT1NUID0gYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICBjb25zdCByZXEgPSByZXF1ZXN0IGluc3RhbmNlb2YgUmVxdWVzdCA/IHJlcXVlc3QgOiByZXF1ZXN0LnJlcXVlc3Q7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0SGFuZGxlcih7IHJlcSB9KTtcbiAgICBpZiAocmVzcG9uc2UgaW5zdGFuY2VvZiBVcGxvYWRUaGluZ0Vycm9yMykge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShmb3JtYXRFcnJvcihyZXNwb25zZSwgb3B0cy5yb3V0ZXIpKSwge1xuICAgICAgICBzdGF0dXM6IGdldFN0YXR1c0NvZGVGcm9tRXJyb3IocmVzcG9uc2UpLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogVVBMT0FEVEhJTkdfVkVSU0lPTlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkXCIsIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiBVUExPQURUSElOR19WRVJTSU9OXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmJvZHkpLCB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogVVBMT0FEVEhJTkdfVkVSU0lPTlxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRCdWlsZFBlcm1zID0gYnVpbGRQZXJtaXNzaW9uc0luZm9IYW5kbGVyKG9wdHMpO1xuICBjb25zdCBHRVQgPSAocmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IF9yZXEgPSByZXF1ZXN0IGluc3RhbmNlb2YgUmVxdWVzdCA/IHJlcXVlc3QgOiByZXF1ZXN0LnJlcXVlc3Q7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShnZXRCdWlsZFBlcm1zKCkpLCB7XG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogVVBMT0FEVEhJTkdfVkVSU0lPTlxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4geyBHRVQsIFBPU1QgfTtcbn07XG52YXIgZXh0cmFjdFJvdXRlckNvbmZpZyA9IChyb3V0ZXIpID0+IGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcih7IHJvdXRlciB9KSgpO1xuXG5leHBvcnQge1xuICBVVEFwaSxcbiAgY3JlYXRlVXBsb2FkdGhpbmcsXG4gIGNyZWF0ZVNlcnZlckhhbmRsZXIsXG4gIGV4dHJhY3RSb3V0ZXJDb25maWdcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1DRldDSkVPUS5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-CFWCJEOQ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml) => {\n  const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n  const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n  const code = codeMatch == null ? void 0 : codeMatch[1];\n  const message = messageMatch == null ? void 0 : messageMatch[1];\n  if (!code || !message)\n    return null;\n  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n  AccessDenied: \"FORBIDDEN\",\n  // 403 Forbidden\n  EntityTooSmall: \"TOO_SMALL\",\n  // 400 Bad Request\n  EntityTooLarge: \"TOO_LARGE\",\n  // 400 Bad Request\n  ExpiredToken: \"FORBIDDEN\",\n  // 400 Bad Request\n  IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n  // 400 Bad Request\n  InternalError: \"INTERNAL_SERVER_ERROR\",\n  // 500 Internal Server Error\n  KeyTooLongError: \"KEY_TOO_LONG\",\n  // 400 Bad Request\n  MaxMessageLengthExceeded: \"TOO_LARGE\"\n  // 400 Bad Request\n};\n\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n  const s3Res = await opts.fetch(opts.url, {\n    method: \"PUT\",\n    body: opts.chunk,\n    headers: {\n      \"Content-Type\": opts.contentType,\n      \"Content-Disposition\": [\n        opts.contentDisposition,\n        `filename=\"${encodeURI(opts.fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(opts.fileName)}`\n      ].join(\"; \")\n    }\n  });\n  if (s3Res.ok) {\n    const etag = s3Res.headers.get(\"Etag\");\n    if (!etag) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Missing Etag header from uploaded part\"\n      });\n    }\n    return etag.replace(/\"/g, \"\");\n  }\n  if (retryCount < opts.maxRetries) {\n    const delay = 2 ** retryCount * 1e3;\n    await new Promise((r) => setTimeout(r, delay));\n    return uploadPart(opts, retryCount++);\n  }\n  await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n    method: \"POST\",\n    body: JSON.stringify({\n      fileKey: opts.key\n    }),\n    headers: opts.utRequestHeaders\n  });\n  const text = await s3Res.text();\n  const parsed = maybeParseResponseXML(text);\n  if (parsed == null ? void 0 : parsed.message) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n      code: \"UPLOAD_FAILED\",\n      message: parsed.message\n    });\n  }\n  throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"Failed to upload file to storage provider\",\n    cause: s3Res\n  });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"PUT\", opts.url, true);\n    xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n    xhr.setRequestHeader(\n      \"Content-Disposition\",\n      [\n        opts.contentDisposition,\n        `filename=\"${encodeURI(opts.fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(opts.fileName)}`\n      ].join(\"; \")\n    );\n    xhr.onload = async () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        const etag = xhr.getResponseHeader(\"Etag\");\n        etag ? resolve(etag) : reject(\"NO ETAG\");\n      } else if (retryCount < opts.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 1e3;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1);\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n    let lastProgress = 0;\n    xhr.onerror = async () => {\n      lastProgress = 0;\n      if (retryCount < opts.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 100;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1);\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n    xhr.upload.onprogress = (e) => {\n      const delta = e.loaded - lastProgress;\n      lastProgress += delta;\n      opts.onProgress(delta);\n    };\n    xhr.send(opts.chunk);\n  });\n}\n\n\n//# sourceMappingURL=chunk-S3R3VXRK.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1TM1IzVlhSSy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQytFOztBQUUvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5Qyw0QkFBNEIseUJBQXlCO0FBQ3JELGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUVBQWdCO0FBQ2hDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwyRUFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUVBQWdCO0FBQzlCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxZQUFZLGlFQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDLDRCQUE0Qix5QkFBeUI7QUFDckQsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFNRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRseS8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLVMzUjNWWFJLLm1qcz9hOTJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9tdWx0aS1wYXJ0LnRzXG5pbXBvcnQgeyBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMLCBVcGxvYWRUaGluZ0Vycm9yIH0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2ludGVybmFsL3MzLWVycm9yLXBhcnNlci50c1xudmFyIG1heWJlUGFyc2VSZXNwb25zZVhNTCA9IChtYXliZVhtbCkgPT4ge1xuICBjb25zdCBjb2RlTWF0Y2ggPSBtYXliZVhtbC5tYXRjaCgvPENvZGU+KC4qPyk8XFwvQ29kZT4vcyk7XG4gIGNvbnN0IG1lc3NhZ2VNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88TWVzc2FnZT4oLio/KTxcXC9NZXNzYWdlPi9zKTtcbiAgY29uc3QgY29kZSA9IGNvZGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogY29kZU1hdGNoWzFdO1xuICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBtZXNzYWdlTWF0Y2hbMV07XG4gIGlmICghY29kZSB8fCAhbWVzc2FnZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHsgY29kZTogczNDb2RlVG9VcGxvYWRUaGluZ0NvZGVbY29kZV0gPz8gREVGQVVMVF9FUlJPUl9DT0RFLCBtZXNzYWdlIH07XG59O1xudmFyIERFRkFVTFRfRVJST1JfQ09ERSA9IFwiVVBMT0FEX0ZBSUxFRFwiO1xudmFyIHMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlID0ge1xuICBBY2Nlc3NEZW5pZWQ6IFwiRk9SQklEREVOXCIsXG4gIC8vIDQwMyBGb3JiaWRkZW5cbiAgRW50aXR5VG9vU21hbGw6IFwiVE9PX1NNQUxMXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBFbnRpdHlUb29MYXJnZTogXCJUT09fTEFSR0VcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEV4cGlyZWRUb2tlbjogXCJGT1JCSURERU5cIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEluY29ycmVjdE51bWJlck9mRmlsZXNJblBvc3RSZXF1ZXN0OiBcIlRPT19NQU5ZX0ZJTEVTXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBJbnRlcm5hbEVycm9yOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAvLyA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gIEtleVRvb0xvbmdFcnJvcjogXCJLRVlfVE9PX0xPTkdcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIE1heE1lc3NhZ2VMZW5ndGhFeGNlZWRlZDogXCJUT09fTEFSR0VcIlxuICAvLyA0MDAgQmFkIFJlcXVlc3Rcbn07XG5cbi8vIHNyYy9pbnRlcm5hbC9tdWx0aS1wYXJ0LnRzXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRQYXJ0KG9wdHMsIHJldHJ5Q291bnQgPSAwKSB7XG4gIGNvbnN0IHMzUmVzID0gYXdhaXQgb3B0cy5mZXRjaChvcHRzLnVybCwge1xuICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICBib2R5OiBvcHRzLmNodW5rLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IG9wdHMuY29udGVudFR5cGUsXG4gICAgICBcIkNvbnRlbnQtRGlzcG9zaXRpb25cIjogW1xuICAgICAgICBvcHRzLmNvbnRlbnREaXNwb3NpdGlvbixcbiAgICAgICAgYGZpbGVuYW1lPVwiJHtlbmNvZGVVUkkob3B0cy5maWxlTmFtZSl9XCJgLFxuICAgICAgICBgZmlsZW5hbWUqPVVURi04Jycke2VuY29kZVVSSShvcHRzLmZpbGVOYW1lKX1gXG4gICAgICBdLmpvaW4oXCI7IFwiKVxuICAgIH1cbiAgfSk7XG4gIGlmIChzM1Jlcy5vaykge1xuICAgIGNvbnN0IGV0YWcgPSBzM1Jlcy5oZWFkZXJzLmdldChcIkV0YWdcIik7XG4gICAgaWYgKCFldGFnKSB7XG4gICAgICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgICAgICBtZXNzYWdlOiBcIk1pc3NpbmcgRXRhZyBoZWFkZXIgZnJvbSB1cGxvYWRlZCBwYXJ0XCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXRhZy5yZXBsYWNlKC9cIi9nLCBcIlwiKTtcbiAgfVxuICBpZiAocmV0cnlDb3VudCA8IG9wdHMubWF4UmV0cmllcykge1xuICAgIGNvbnN0IGRlbGF5ID0gMiAqKiByZXRyeUNvdW50ICogMWUzO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyKSA9PiBzZXRUaW1lb3V0KHIsIGRlbGF5KSk7XG4gICAgcmV0dXJuIHVwbG9hZFBhcnQob3B0cywgcmV0cnlDb3VudCsrKTtcbiAgfVxuICBhd2FpdCBvcHRzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2ZhaWx1cmVDYWxsYmFja1wiKSwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZmlsZUtleTogb3B0cy5rZXlcbiAgICB9KSxcbiAgICBoZWFkZXJzOiBvcHRzLnV0UmVxdWVzdEhlYWRlcnNcbiAgfSk7XG4gIGNvbnN0IHRleHQgPSBhd2FpdCBzM1Jlcy50ZXh0KCk7XG4gIGNvbnN0IHBhcnNlZCA9IG1heWJlUGFyc2VSZXNwb25zZVhNTCh0ZXh0KTtcbiAgaWYgKHBhcnNlZCA9PSBudWxsID8gdm9pZCAwIDogcGFyc2VkLm1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICBjb2RlOiBcIlVQTE9BRF9GQUlMRURcIixcbiAgICAgIG1lc3NhZ2U6IHBhcnNlZC5tZXNzYWdlXG4gICAgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHVwbG9hZCBmaWxlIHRvIHN0b3JhZ2UgcHJvdmlkZXJcIixcbiAgICBjYXVzZTogczNSZXNcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiB1cGxvYWRQYXJ0V2l0aFByb2dyZXNzKG9wdHMsIHJldHJ5Q291bnQgPSAwKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4oXCJQVVRcIiwgb3B0cy51cmwsIHRydWUpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIG9wdHMuZmlsZVR5cGUpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFxuICAgICAgXCJDb250ZW50LURpc3Bvc2l0aW9uXCIsXG4gICAgICBbXG4gICAgICAgIG9wdHMuY29udGVudERpc3Bvc2l0aW9uLFxuICAgICAgICBgZmlsZW5hbWU9XCIke2VuY29kZVVSSShvcHRzLmZpbGVOYW1lKX1cImAsXG4gICAgICAgIGBmaWxlbmFtZSo9VVRGLTgnJyR7ZW5jb2RlVVJJKG9wdHMuZmlsZU5hbWUpfWBcbiAgICAgIF0uam9pbihcIjsgXCIpXG4gICAgKTtcbiAgICB4aHIub25sb2FkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgY29uc3QgZXRhZyA9IHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkV0YWdcIik7XG4gICAgICAgIGV0YWcgPyByZXNvbHZlKGV0YWcpIDogcmVqZWN0KFwiTk8gRVRBR1wiKTtcbiAgICAgIH0gZWxzZSBpZiAocmV0cnlDb3VudCA8IG9wdHMubWF4UmV0cmllcykge1xuICAgICAgICBjb25zdCBkZWxheSA9IE1hdGgucG93KDIsIHJldHJ5Q291bnQpICogMWUzO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgZGVsYXkpKTtcbiAgICAgICAgYXdhaXQgdXBsb2FkUGFydFdpdGhQcm9ncmVzcyhvcHRzLCByZXRyeUNvdW50ICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoXCJNYXggcmV0cmllcyBleGNlZWRlZFwiKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBsYXN0UHJvZ3Jlc3MgPSAwO1xuICAgIHhoci5vbmVycm9yID0gYXN5bmMgKCkgPT4ge1xuICAgICAgbGFzdFByb2dyZXNzID0gMDtcbiAgICAgIGlmIChyZXRyeUNvdW50IDwgb3B0cy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gTWF0aC5wb3coMiwgcmV0cnlDb3VudCkgKiAxMDA7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBkZWxheSkpO1xuICAgICAgICBhd2FpdCB1cGxvYWRQYXJ0V2l0aFByb2dyZXNzKG9wdHMsIHJldHJ5Q291bnQgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChcIk1heCByZXRyaWVzIGV4Y2VlZGVkXCIpO1xuICAgICAgfVxuICAgIH07XG4gICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gKGUpID0+IHtcbiAgICAgIGNvbnN0IGRlbHRhID0gZS5sb2FkZWQgLSBsYXN0UHJvZ3Jlc3M7XG4gICAgICBsYXN0UHJvZ3Jlc3MgKz0gZGVsdGE7XG4gICAgICBvcHRzLm9uUHJvZ3Jlc3MoZGVsdGEpO1xuICAgIH07XG4gICAgeGhyLnNlbmQob3B0cy5jaHVuayk7XG4gIH0pO1xufVxuXG5leHBvcnQge1xuICBtYXliZVBhcnNlUmVzcG9uc2VYTUwsXG4gIHVwbG9hZFBhcnQsXG4gIHVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3Ncbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1TM1IzVlhSSy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-TX4EGJ4S.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-TX4EGJ4S.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOADTHING_VERSION: () => (/* binding */ UPLOADTHING_VERSION),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   buildPermissionsInfoHandler: () => (/* binding */ buildPermissionsInfoHandler),\n/* harmony export */   buildRequestHandler: () => (/* binding */ buildRequestHandler),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   defaultErrorFormatter: () => (/* binding */ defaultErrorFormatter),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   unsetMarker: () => (/* binding */ unsetMarker)\n/* harmony export */ });\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n// package.json\nvar package_default = {\n  name: \"uploadthing\",\n  version: \"6.0.4\",\n  engines: {\n    node: \">=18.13.0\"\n  },\n  license: \"MIT\",\n  exports: {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      types: \"./dist/client.d.ts\",\n      import: \"./dist/client.mjs\",\n      require: \"./dist/client.js\"\n    },\n    \"./server\": {\n      types: \"./dist/server.d.ts\",\n      import: \"./dist/server.mjs\",\n      require: \"./dist/server.js\"\n    },\n    \"./next\": {\n      types: \"./dist/next.d.ts\",\n      import: \"./dist/next.mjs\",\n      require: \"./dist/next.js\"\n    },\n    \"./next-legacy\": {\n      types: \"./dist/next-legacy.d.ts\",\n      import: \"./dist/next-legacy.mjs\",\n      require: \"./dist/next-legacy.js\"\n    },\n    \"./express\": {\n      import: \"./dist/express.mjs\",\n      types: \"./dist/express.d.ts\",\n      require: \"./dist/express.js\"\n    },\n    \"./tw\": {\n      types: \"./dist/tw.d.ts\",\n      import: \"./dist/tw.mjs\",\n      require: \"./dist/tw.js\"\n    },\n    \"./fastify\": {\n      types: \"./dist/fastify.d.ts\",\n      import: \"./dist/fastify.mjs\",\n      require: \"./dist/fastify.js\"\n    },\n    \"./h3\": {\n      types: \"./dist/h3.d.ts\",\n      import: \"./dist/h3.mjs\",\n      require: \"./dist/h3.js\"\n    }\n  },\n  files: [\n    \"dist\"\n  ],\n  publishConfig: {\n    access: \"public\"\n  },\n  typesVersions: {\n    \"*\": {\n      client: [\n        \"dist/client.d.ts\"\n      ],\n      server: [\n        \"dist/server.d.ts\"\n      ],\n      next: [\n        \"dist/next.d.ts\"\n      ],\n      \"next-legacy\": [\n        \"dist/next-legacy.d.ts\"\n      ],\n      tw: [\n        \"dist/tw.d.ts\"\n      ],\n      express: [\n        \"dist/express.d.ts\"\n      ],\n      fastify: [\n        \"dist/fastify.d.ts\"\n      ],\n      h3: [\n        \"dist/h3.d.ts\"\n      ]\n    }\n  },\n  scripts: {\n    lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n    build: \"tsup\",\n    clean: \"git clean -xdf dist node_modules\",\n    dev: \"tsup --watch\",\n    test: \"vitest run\",\n    \"test:watch\": \"vitest\",\n    typecheck: \"tsc --noEmit\"\n  },\n  dependencies: {\n    \"@uploadthing/mime-types\": \"^0.2.2\",\n    \"@uploadthing/shared\": \"^6.0.2\"\n  },\n  devDependencies: {\n    \"@types/express\": \"^4.17.17\",\n    \"@types/react\": \"18.2.33\",\n    \"@uploadthing/eslint-config\": \"0.2.0\",\n    \"@uploadthing/tsconfig\": \"0.1.0\",\n    \"@uploadthing/tsup-config\": \"0.1.0\",\n    eslint: \"^8.47.0\",\n    express: \"^4.18.2\",\n    fastify: \"^4.23.2\",\n    h3: \"^1.8.1\",\n    next: \"14.0.1\",\n    \"solid-js\": \"^1.7.11\",\n    tailwindcss: \"^3.3.2\",\n    tsup: \"6.7.0\",\n    \"type-fest\": \"^3.11.1\",\n    typescript: \"^5.1.6\",\n    undici: \"^5.20.0\",\n    vitest: \"^0.30.1\",\n    zod: \"^3.22.3\"\n  },\n  eslintConfig: {\n    root: true,\n    extends: [\n      \"@uploadthing/eslint-config/base\"\n    ]\n  }\n};\n\n// src/constants.ts\nif (!package_default.version)\n  throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = package_default.version;\n\n// src/internal/error-formatter.ts\nfunction defaultErrorFormatter(error) {\n  return {\n    message: error.message\n  };\n}\nfunction formatError(error, router) {\n  var _a;\n  const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;\n  return errorFormatter(error);\n}\n\n// src/internal/types.ts\nvar unsetMarker = \"unsetMarker\";\nvar VALID_ACTION_TYPES = [\n  \"upload\",\n  \"failure\",\n  \"multipart-complete\"\n];\n\n// src/internal/handler.ts\n\n\n// src/internal/dev-hook.ts\n\nvar isValidResponse = (response) => {\n  if (!response.ok)\n    return false;\n  if (response.status >= 400)\n    return false;\n  if (!response.headers.has(\"x-uploadthing-version\"))\n    return false;\n  return true;\n};\nvar conditionalDevServer = async (opts) => {\n  if (false)\n    {}\n  const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.pollForFileData)(\n    {\n      url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),\n      apiKey: opts.apiKey,\n      sdkVersion: UPLOADTHING_VERSION\n    },\n    async (json) => {\n      const file = json.fileData;\n      let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n      if (!callbackUrl.startsWith(\"http\"))\n        callbackUrl = \"http://\" + callbackUrl;\n      console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n      const response = await fetch(callbackUrl, {\n        method: \"POST\",\n        body: JSON.stringify({\n          status: \"uploaded\",\n          metadata: JSON.parse(file.metadata ?? \"{}\"),\n          file: {\n            url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n            key: opts.fileKey,\n            name: file.fileName,\n            size: file.fileSize\n          }\n        }),\n        headers: {\n          \"uploadthing-hook\": \"callback\"\n        }\n      });\n      if (isValidResponse(response)) {\n        console.log(\n          \"[UT] Successfully simulated callback for file\",\n          opts.fileKey\n        );\n      } else {\n        console.error(\n          \"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\",\n          opts.fileKey\n        );\n      }\n      return file;\n    }\n  );\n  if (fileData !== void 0)\n    return fileData;\n  console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);\n  throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"File took too long to upload\"\n  });\n};\n\n// src/internal/parser.ts\nfunction getParseFn(parser) {\n  if (typeof parser.parse === \"function\") {\n    return parser.parse;\n  }\n  throw new Error(\"Invalid parser\");\n}\n\n// src/internal/handler.ts\nvar createUTFetch = (apiKey) => {\n  return async (endpoint, payload) => {\n    const response = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(endpoint), {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-uploadthing-api-key\": apiKey,\n        \"x-uploadthing-version\": UPLOADTHING_VERSION\n      }\n    });\n    return response;\n  };\n};\nvar fileCountLimitHit = (files, routeConfig) => {\n  var _a;\n  const counts = {};\n  files.forEach((file) => {\n    const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(routeConfig));\n    if (!counts[type]) {\n      counts[type] = 1;\n    } else {\n      counts[type] += 1;\n    }\n  });\n  for (const _key in counts) {\n    const key = _key;\n    const count = counts[key];\n    const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n    if (!limit) {\n      console.error(routeConfig, key);\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid config during file count\",\n        cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n      });\n    }\n    if (count > limit) {\n      return { limitHit: true, type: key, limit, count };\n    }\n  }\n  return { limitHit: false };\n};\nvar getHeader = (req, key) => {\n  if (req.headers instanceof Headers) {\n    return req.headers.get(key);\n  }\n  return req.headers[key];\n};\nvar buildRequestHandler = (opts) => {\n  return async (input) => {\n    var _a;\n    if (true) {\n      console.log(\"[UT] UploadThing dev server is now running!\");\n    }\n    const { req, res, event } = input;\n    const { router, config } = opts;\n    const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n    let url;\n    try {\n      url = new URL(input.url ?? req.url ?? \"\");\n    } catch (error) {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: `Invalid url '${((_a = input.url) == null ? void 0 : _a.href) ?? req.url}'`,\n        cause: error\n      });\n    }\n    const params = url.searchParams;\n    const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? void 0;\n    const slug = params.get(\"slug\") ?? void 0;\n    const actionType = params.get(\"actionType\") ?? void 0;\n    if (!slug)\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"No slug provided\"\n      });\n    if (slug && typeof slug !== \"string\") {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`slug` must be a string\",\n        cause: `Expected slug to be of type 'string', got '${typeof slug}'`\n      });\n    }\n    if (actionType && typeof actionType !== \"string\") {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`actionType` must be a string\",\n        cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`\n      });\n    }\n    if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`uploadthingHook` must be a string\",\n        cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`\n      });\n    }\n    if (!preferredOrEnvSecret) {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n        cause: \"No secret provided\"\n      });\n    }\n    const uploadable = router[slug];\n    if (!uploadable) {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"NOT_FOUND\",\n        message: `No file route found for slug ${slug}`\n      });\n    }\n    const utFetch = createUTFetch(preferredOrEnvSecret);\n    if (uploadthingHook === \"callback\") {\n      const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n      if (maybeReqBody instanceof Error) {\n        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid request body\",\n          cause: maybeReqBody\n        });\n      }\n      const res2 = await uploadable.resolver({\n        file: maybeReqBody.file,\n        metadata: maybeReqBody.metadata\n      });\n      await utFetch(\"/api/serverCallback\", {\n        fileKey: maybeReqBody.file.key,\n        callbackData: res2 ?? null\n      });\n      return { status: 200 };\n    }\n    if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n      return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        cause: `Invalid action type ${actionType}`,\n        message: `Expected ${VALID_ACTION_TYPES.map((x) => `\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`\n      });\n    }\n    switch (actionType) {\n      case \"upload\": {\n        const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n        if (maybeInput instanceof Error) {\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeInput\n          });\n        }\n        const { files, input: userInput } = maybeInput;\n        let parsedInput = {};\n        try {\n          const inputParser = uploadable._def.inputParser;\n          parsedInput = await getParseFn(inputParser)(userInput);\n        } catch (error) {\n          console.error(error);\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid input.\",\n            cause: error\n          });\n        }\n        let metadata = {};\n        try {\n          metadata = await uploadable._def.middleware({\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            req,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            res,\n            event,\n            input: parsedInput\n          });\n        } catch (error) {\n          console.error(error);\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to run middleware.\",\n            cause: error\n          });\n        }\n        if (!Array.isArray(files) || !files.every(\n          (f) => (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(f) && typeof f.name === \"string\" && typeof f.size === \"number\"\n        ))\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Files must be an array of objects with name and size\",\n            cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(\n              files\n            )}'`\n          });\n        let parsedConfig;\n        try {\n          parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(\n            uploadable._def.routerConfig\n          );\n        } catch (error) {\n          console.error(error);\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config.\",\n            cause: error\n          });\n        }\n        try {\n          const { limitHit, count, limit, type } = fileCountLimitHit(\n            files,\n            parsedConfig\n          );\n          if (limitHit) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n              code: \"BAD_REQUEST\",\n              message: \"File limit exceeded\",\n              cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`\n            });\n          }\n        } catch (error) {\n          console.error(error);\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config.\",\n            cause: error\n          });\n        }\n        const callbackUrl = resolveCallbackUrl({ config, req, url });\n        const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n          files,\n          routeConfig: parsedConfig,\n          metadata,\n          callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n          callbackSlug: slug\n        });\n        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(\n          uploadthingApiResponse\n        );\n        if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n          console.error(\"[UT] unable to get presigned urls\");\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"URL_GENERATION_FAILED\",\n            message: \"Unable to get presigned urls\",\n            cause: parsedResponse\n          });\n        }\n        if (true) {\n          for (const file of parsedResponse) {\n            void conditionalDevServer({\n              fileKey: file.key,\n              apiKey: preferredOrEnvSecret\n            });\n          }\n        }\n        return {\n          body: parsedResponse.map((x) => ({\n            ...x,\n            pollingUrl: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(`/api/serverCallback`)\n          })),\n          status: 200\n        };\n      }\n      case \"multipart-complete\": {\n        const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n        if (maybeReqBody instanceof Error) {\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeReqBody\n          });\n        }\n        const completeRes = await utFetch(\"/api/completeMultipart\", {\n          fileKey: maybeReqBody.fileKey,\n          uploadId: maybeReqBody.uploadId,\n          etags: maybeReqBody.etags\n        });\n        if (!completeRes.ok) {\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to complete multipart upload\"\n          });\n        }\n        return { status: 200 };\n      }\n      case \"failure\": {\n        const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n        if (maybeReqBody instanceof Error) {\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeReqBody\n          });\n        }\n        const { fileKey, uploadId } = maybeReqBody;\n        const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n          fileKey,\n          uploadId\n        });\n        if (!uploadthingApiResponse.ok) {\n          console.error(\"[UT] failed to mark upload as failed\");\n          const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(\n            uploadthingApiResponse\n          );\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"URL_GENERATION_FAILED\",\n            message: \"Unable to get presigned urls\",\n            cause: parsedResponse\n          });\n        }\n        try {\n          uploadable._def.onUploadError({\n            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n              code: \"UPLOAD_FAILED\",\n              message: `Upload failed for ${fileKey}`\n            }),\n            fileKey\n          });\n        } catch (error) {\n          console.error(\n            \"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\"\n          );\n          console.error(error);\n          return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to run onUploadError callback\",\n            cause: error\n          });\n        }\n        return { status: 200 };\n      }\n      default: {\n        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: `Invalid action type`\n        });\n      }\n    }\n  };\n};\nfunction resolveCallbackUrl(opts) {\n  var _a, _b;\n  let callbackUrl = opts.url;\n  if ((_a = opts.config) == null ? void 0 : _a.callbackUrl) {\n    callbackUrl = (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(opts.config.callbackUrl);\n  } else if (process.env.UPLOADTHING_URL) {\n    callbackUrl = (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(process.env.UPLOADTHING_URL);\n  }\n  if (true) {\n    return callbackUrl;\n  }\n  let parsedFromHeaders = (_b = getHeader(opts.req, \"origin\") ?? getHeader(opts.req, \"referer\") ?? getHeader(opts.req, \"host\") ?? getHeader(opts.req, \"x-forwarded-host\")) == null ? void 0 : _b.toString();\n  if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n    parsedFromHeaders = (getHeader(opts.req, \"x-forwarded-proto\") ?? \"https\").toString() + \"://\" + parsedFromHeaders;\n  }\n  if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n    console.warn(\n      [\n        \"[UT] [WARN] You are using a localhost callback url in production which is not supported.\",\n        \"Read more and learn how to fix it here: https://uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\"\n      ].join(\" \")\n    );\n    return callbackUrl;\n  }\n  return (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(parsedFromHeaders);\n}\nvar buildPermissionsInfoHandler = (opts) => {\n  return () => {\n    const r = opts.router;\n    const permissions = Object.keys(r).map((k) => {\n      const route = r[k];\n      const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(route._def.routerConfig);\n      return {\n        slug: k,\n        config\n      };\n    });\n    return permissions;\n  };\n};\n\n// src/internal/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n  const _def = {\n    // Default router config\n    routerConfig: {\n      image: {\n        maxFileSize: \"4MB\"\n      }\n    },\n    inputParser: { parse: () => ({}), _input: {}, _output: {} },\n    middleware: () => ({}),\n    onUploadError: () => ({}),\n    errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n    // Overload with properties passed in\n    ...initDef\n  };\n  return {\n    input(userParser) {\n      return internalCreateBuilder({\n        ..._def,\n        inputParser: userParser\n      });\n    },\n    middleware(userMiddleware) {\n      return internalCreateBuilder({\n        ..._def,\n        middleware: userMiddleware\n      });\n    },\n    onUploadComplete(userUploadComplete) {\n      return {\n        _def,\n        resolver: userUploadComplete\n      };\n    },\n    onUploadError(userOnUploadError) {\n      return internalCreateBuilder({\n        ..._def,\n        onUploadError: userOnUploadError\n      });\n    }\n  };\n}\nfunction createBuilder(opts) {\n  return (input) => {\n    return internalCreateBuilder({\n      routerConfig: input,\n      ...opts\n    });\n  };\n}\n\n\n//# sourceMappingURL=chunk-TX4EGJ4S.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-TX4EGJ4S.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incompatibleNodeGuard: () => (/* binding */ incompatibleNodeGuard)\n/* harmony export */ });\n// src/internal/incompat-node-guard.ts\nfunction incompatibleNodeGuard() {\n  var _a, _b, _c, _d;\n  if (typeof process === \"undefined\")\n    return;\n  let major;\n  let minor;\n  const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(\".\");\n  if (maybeNodeVersion) {\n    [major, minor] = maybeNodeVersion.map((v) => parseInt(v, 10));\n  }\n  const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;\n  if (!major && maybeNodePath) {\n    const nodeVersion = (_d = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];\n    if (nodeVersion) {\n      [major, minor] = nodeVersion.substring(1).split(\".\").map((v) => parseInt(v, 10));\n    }\n  }\n  if (!major || !minor)\n    return;\n  if (major > 18)\n    return;\n  if (major === 18 && minor >= 13)\n    return;\n  console.error(\n    `[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`\n  );\n  process.exit(1);\n}\n\n\n//# sourceMappingURL=chunk-WPSY3MFJ.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE1BQU0sR0FBRyxNQUFNO0FBQ3BEO0FBQ0E7QUFDQTs7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRseS8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLVdQU1kzTUZKLm1qcz84YjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9pbmNvbXBhdC1ub2RlLWd1YXJkLnRzXG5mdW5jdGlvbiBpbmNvbXBhdGlibGVOb2RlR3VhcmQoKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiKVxuICAgIHJldHVybjtcbiAgbGV0IG1ham9yO1xuICBsZXQgbWlub3I7XG4gIGNvbnN0IG1heWJlTm9kZVZlcnNpb24gPSAoX2IgPSAoX2EgPSBwcm9jZXNzLnZlcnNpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2Eubm9kZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnNwbGl0KFwiLlwiKTtcbiAgaWYgKG1heWJlTm9kZVZlcnNpb24pIHtcbiAgICBbbWFqb3IsIG1pbm9yXSA9IG1heWJlTm9kZVZlcnNpb24ubWFwKCh2KSA9PiBwYXJzZUludCh2LCAxMCkpO1xuICB9XG4gIGNvbnN0IG1heWJlTm9kZVBhdGggPSAoX2MgPSBwcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLk5PREU7XG4gIGlmICghbWFqb3IgJiYgbWF5YmVOb2RlUGF0aCkge1xuICAgIGNvbnN0IG5vZGVWZXJzaW9uID0gKF9kID0gL3YoXFxkKylcXC4oXFxkKylcXC4oXFxkKykvLmV4ZWMobWF5YmVOb2RlUGF0aCkpID09IG51bGwgPyB2b2lkIDAgOiBfZFswXTtcbiAgICBpZiAobm9kZVZlcnNpb24pIHtcbiAgICAgIFttYWpvciwgbWlub3JdID0gbm9kZVZlcnNpb24uc3Vic3RyaW5nKDEpLnNwbGl0KFwiLlwiKS5tYXAoKHYpID0+IHBhcnNlSW50KHYsIDEwKSk7XG4gICAgfVxuICB9XG4gIGlmICghbWFqb3IgfHwgIW1pbm9yKVxuICAgIHJldHVybjtcbiAgaWYgKG1ham9yID4gMTgpXG4gICAgcmV0dXJuO1xuICBpZiAobWFqb3IgPT09IDE4ICYmIG1pbm9yID49IDEzKVxuICAgIHJldHVybjtcbiAgY29uc29sZS5lcnJvcihcbiAgICBgW1VUXTogWU9VIEFSRSBVU0lORyBBIExFR0FDWSAoJHttYWpvcn0uJHttaW5vcn0pIE5PREUgVkVSU0lPTiBXSElDSCBJU04nVCBPRkZJQ0lBTExZIFNVUFBPUlRFRC4gUExFQVNFIFVQR1JBREUgVE8gTk9ERSBeMTguMTMuYFxuICApO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59XG5cbmV4cG9ydCB7XG4gIGluY29tcGF0aWJsZU5vZGVHdWFyZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVdQU1kzTUZKLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _chunk_CFWCJEOQ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-CFWCJEOQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-CFWCJEOQ.mjs\");\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-TX4EGJ4S.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-TX4EGJ4S.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n\n\n\n\n\n\n// src/next.ts\nvar createUploadthing = (opts) => (0,_chunk_TX4EGJ4S_mjs__WEBPACK_IMPORTED_MODULE_3__.createBuilder)(opts);\nvar createNextRouteHandler = (opts) => {\n  const handlers = (0,_chunk_CFWCJEOQ_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerHandler)(opts);\n  return {\n    POST: (req) => handlers.POST(req),\n    GET: (req) => handlers.GET(req)\n  };\n};\n\n//# sourceMappingURL=next.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRThCO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7O0FBRTlCO0FBQ0Esa0NBQWtDLGtFQUFhO0FBQy9DO0FBQ0EsbUJBQW1CLHdFQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW50bHkvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcz9mNDA3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZVNlcnZlckhhbmRsZXJcbn0gZnJvbSBcIi4vY2h1bmstQ0ZXQ0pFT1EubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLVMzUjNWWFJLLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1XUFNZM01GSi5tanNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUJ1aWxkZXJcbn0gZnJvbSBcIi4vY2h1bmstVFg0RUdKNFMubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLTRQREdWSDU3Lm1qc1wiO1xuXG4vLyBzcmMvbmV4dC50c1xudmFyIGNyZWF0ZVVwbG9hZHRoaW5nID0gKG9wdHMpID0+IGNyZWF0ZUJ1aWxkZXIob3B0cyk7XG52YXIgY3JlYXRlTmV4dFJvdXRlSGFuZGxlciA9IChvcHRzKSA9PiB7XG4gIGNvbnN0IGhhbmRsZXJzID0gY3JlYXRlU2VydmVySGFuZGxlcihvcHRzKTtcbiAgcmV0dXJuIHtcbiAgICBQT1NUOiAocmVxKSA9PiBoYW5kbGVycy5QT1NUKHJlcSksXG4gICAgR0VUOiAocmVxKSA9PiBoYW5kbGVycy5HRVQocmVxKVxuICB9O1xufTtcbmV4cG9ydCB7XG4gIGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIsXG4gIGNyZWF0ZVVwbG9hZHRoaW5nXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ })

};
;